name: Auto Unassign Stale Issues

on:
  schedule:
    # Run daily at 12:00 UTC
    - cron: '0 12 * * *'
  workflow_dispatch: # Allow manual trigger

permissions:
  issues: write
  pull-requests: read

jobs:
  unassign-stale-issues:
    runs-on: ubuntu-latest
    steps:
      - name: Unassign stale issues
        uses: actions/github-script@v7
        with:
          script: |
            const DAYS_BEFORE_UNASSIGN = 7;
            const now = new Date();
            const cutoffDate = new Date(now - DAYS_BEFORE_UNASSIGN * 24 * 60 * 60 * 1000);
            
            console.log(`Checking for issues assigned before ${cutoffDate.toISOString()}`);
            
            // Get all open issues with assignees
            const issues = await github.paginate(github.rest.issues.listForRepo, {
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              per_page: 100
            });
            
            console.log(`Found ${issues.length} open issues`);
            
            for (const issue of issues) {
              // Skip if no assignees or if it's a pull request
              if (!issue.assignees || issue.assignees.length === 0 || issue.pull_request) {
                continue;
              }
              
              console.log(`Checking issue #${issue.number}: ${issue.title}`);
              
              // Check when the issue was assigned (using events API)
              const events = await github.paginate(github.rest.issues.listEvents, {
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                per_page: 100
              });
              
              // Find the latest assignment event
              const assignEvents = events.filter(event => event.event === 'assigned').reverse();
              if (assignEvents.length === 0) {
                console.log(`No assignment events found for issue #${issue.number}`);
                continue;
              }
              
              const lastAssignEvent = assignEvents[0];
              const assignDate = new Date(lastAssignEvent.created_at);
              
              console.log(`Issue #${issue.number} was last assigned on ${assignDate.toISOString()}`);
              
              // Check if assignment is older than 7 days
              if (assignDate > cutoffDate) {
                console.log(`Issue #${issue.number} is not stale yet`);
                continue;
              }
              
              // Check if there are any PRs that reference this issue
              const prs = await github.paginate(github.rest.search.issuesAndPullRequests, {
                q: `repo:${context.repo.owner}/${context.repo.repo} is:pr ${issue.number} in:body OR #${issue.number} in:body OR closes:${issue.number} OR fixes:${issue.number} OR resolves:${issue.number}`,
                per_page: 100
              });
              
              // Also search for PRs that might reference the issue in title or comments
              const prsByTitle = await github.paginate(github.rest.search.issuesAndPullRequests, {
                q: `repo:${context.repo.owner}/${context.repo.repo} is:pr "${issue.title}" in:title`,
                per_page: 100
              });
              
              const allRelatedPRs = [...prs.data, ...prsByTitle.data];
              const uniquePRs = allRelatedPRs.filter((pr, index, self) => 
                index === self.findIndex(p => p.id === pr.id)
              );
              
              console.log(`Found ${uniquePRs.length} related PRs for issue #${issue.number}`);
              
              // Check if any PR was created after the assignment
              const relevantPRs = uniquePRs.filter(pr => {
                const prCreatedAt = new Date(pr.created_at);
                return prCreatedAt >= assignDate;
              });
              
              if (relevantPRs.length > 0) {
                console.log(`Issue #${issue.number} has ${relevantPRs.length} related PR(s), skipping unassignment`);
                continue;
              }
              
              console.log(`Unassigning stale issue #${issue.number}`);
              
              // Unassign all assignees
              const assigneeLogins = issue.assignees.map(assignee => assignee.login);
              
              try {
                await github.rest.issues.removeAssignees({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  assignees: assigneeLogins
                });
                
                // Add a comment explaining the unassignment
                const commentBody = `🕐 **Auto-unassignment Notice**\n\nThis issue has been automatically unassigned because:\n- It was assigned more than 7 days ago (assigned on ${assignDate.toDateString()})\n- No pull request has been opened to address this issue\n\n**What's next?**\n- If you're still working on this issue, please comment below and reassign yourself\n- If you've opened a PR for this issue, please reference this issue number in your PR description\n- This issue remains open and available for new contributors\n\nThank you for your understanding! 🙏`;

                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: commentBody
                });
                
                console.log(`Successfully unassigned and commented on issue #${issue.number}`);
              } catch (error) {
                console.error(`Failed to unassign issue #${issue.number}:`, error);
              }
            }
            
            console.log('Stale issue unassignment check completed');