name: Auto Unassign Stale Issues

on:
  schedule:
    # Run daily at 9:00 AM UTC (can be adjusted based on maintainer preference)
    - cron: '0 9 * * *'
  workflow_dispatch: # Allow manual triggering for testing

permissions:
  issues: write
  pull-requests: read
  contents: read

jobs:
  auto-unassign:
    runs-on: ubuntu-latest
    steps:
      - name: Auto Unassign Stale Issues
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            
            // Configuration
            const WARNING_DAYS = 5;  // Send warning after 5 days
            const UNASSIGN_DAYS = 7; // Unassign after 7 days
            const EXEMPT_LABELS = ['on-hold', 'wip', 'priority-high', 'priority-critical'];
            
            console.log(`🔍 Checking for stale assigned issues in ${owner}/${repo}`);
            
            try {
              // Get all open issues that are assigned
              const issues = await github.rest.issues.listForRepo({
                owner,
                repo,
                state: 'open',
                per_page: 100,
                sort: 'updated',
                direction: 'asc'
              });
              
              const now = new Date();
              let processedCount = 0;
              let warningCount = 0;
              let unassignedCount = 0;
              
              for (const issue of issues.data) {
                // Skip if not assigned
                if (!issue.assignees || issue.assignees.length === 0) {
                  continue;
                }
                
                // Skip pull requests
                if (issue.pull_request) {
                  continue;
                }
                
                // Skip if has exempt labels
                const hasExemptLabel = issue.labels.some(label => 
                  EXEMPT_LABELS.includes(label.name.toLowerCase())
                );
                if (hasExemptLabel) {
                  console.log(`⏭️  Issue #${issue.number} has exempt label, skipping`);
                  continue;
                }
                
                processedCount++;
                
                // Get issue events to find assignment date
                const events = await github.rest.issues.listEvents({
                  owner,
                  repo,
                  issue_number: issue.number,
                  per_page: 100
                });
                
                // Find the latest assignment event
                const assignmentEvents = events.data.filter(event => 
                  event.event === 'assigned'
                ).sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
                
                if (assignmentEvents.length === 0) {
                  console.log(`⚠️  No assignment event found for issue #${issue.number}, skipping`);
                  continue;
                }
                
                const lastAssignedDate = new Date(assignmentEvents[0].created_at);
                const daysSinceAssignment = Math.floor((now - lastAssignedDate) / (1000 * 60 * 60 * 24));
                
                console.log(`📅 Issue #${issue.number}: ${daysSinceAssignment} days since assignment`);
                
                // Check for linked PRs
                const linkedPRs = await github.rest.search.issuesAndPullRequests({
                  q: `repo:${owner}/${repo} is:pr is:open "${issue.number}" OR "fixes #${issue.number}" OR "closes #${issue.number}" OR "resolves #${issue.number}"`,
                  per_page: 10
                });
                
                const hasLinkedPR = linkedPRs.data.items.length > 0;
                
                if (hasLinkedPR) {
                  console.log(`🔗 Issue #${issue.number} has linked PR(s), skipping auto-unassignment`);
                  continue;
                }
                
                // Send warning after WARNING_DAYS
                if (daysSinceAssignment === WARNING_DAYS) {
                  console.log(`⚠️  Sending warning for issue #${issue.number}`);
                  
                  const assigneeUsernames = issue.assignees.map(assignee => `@${assignee.login}`).join(', ');
                  const warningComment = `## ⏰ Assignment Reminder\n\n` +
                    `Hello ${assigneeUsernames}!\n\n` +
                    `This issue was assigned to you ${WARNING_DAYS} days ago. To keep the issue assigned to you, please:\n\n` +
                    `- Create a pull request that references this issue (using "Fixes #${issue.number}", "Closes #${issue.number}", or similar)\n` +
                    `- OR comment on this issue with an update on your progress\n\n` +
                    `If no activity is detected within ${UNASSIGN_DAYS - WARNING_DAYS} more days, you will be automatically unassigned to allow other contributors to work on this issue.\n\n` +
                    `*This is an automated message. If you need more time or have questions, please comment below.*`;
                  
                  await github.rest.issues.createComment({
                    owner,
                    repo,
                    issue_number: issue.number,
                    body: warningComment
                  });
                  
                  warningCount++;
                }
                // Unassign after UNASSIGN_DAYS
                else if (daysSinceAssignment >= UNASSIGN_DAYS) {
                  console.log(`🔄 Unassigning issue #${issue.number} after ${daysSinceAssignment} days`);
                  
                  // Check if warning comment was already posted
                  const comments = await github.rest.issues.listComments({
                    owner,
                    repo,
                    issue_number: issue.number,
                    per_page: 100
                  });
                  
                  const hasWarningComment = comments.data.some(comment => 
                    comment.user.login === 'github-actions[bot]' && 
                    comment.body.includes('Assignment Reminder')
                  );
                  
                  const assigneeUsernames = issue.assignees.map(assignee => `@${assignee.login}`).join(', ');
                  const unassignComment = `## 🔄 Automatic Unassignment\n\n` +
                    `${assigneeUsernames}, you have been automatically unassigned from this issue after ${daysSinceAssignment} days of inactivity.\n\n` +
                    `This issue is now available for other contributors to pick up. ` +
                    `Feel free to reassign yourself if you're still working on it and can provide an update.\n\n` +
                    `*This is an automated action to keep issues moving and available for active contributors.*`;
                  
                  // Unassign all assignees
                  for (const assignee of issue.assignees) {
                    await github.rest.issues.removeAssignees({
                      owner,
                      repo,
                      issue_number: issue.number,
                      assignees: [assignee.login]
                    });
                  }
                  
                  // Add comment about unassignment
                  await github.rest.issues.createComment({
                    owner,
                    repo,
                    issue_number: issue.number,
                    body: unassignComment
                  });
                  
                  unassignedCount++;
                }
              }
              
              // Summary
              console.log(`\n📊 Summary:`);
              console.log(`- Processed ${processedCount} assigned issues`);
              console.log(`- Sent ${warningCount} warning notifications`);
              console.log(`- Unassigned ${unassignedCount} stale issues`);
              
              // Create a summary comment if any actions were taken
              if (warningCount > 0 || unassignedCount > 0) {
                const summaryTitle = `## 🤖 Daily Issue Maintenance Summary - ${now.toDateString()}`;
                const summaryBody = `${summaryTitle}\n\n` +
                  `**Actions taken:**\n` +
                  `- ⚠️  Warning notifications sent: **${warningCount}**\n` +
                  `- 🔄 Issues unassigned: **${unassignedCount}**\n` +
                  `- 📝 Total assigned issues processed: **${processedCount}**\n\n` +
                  `*This automated maintenance helps keep issues active and available for contributors.*`;
                
                console.log(`\n${summaryBody}`);
              }
              
            } catch (error) {
              console.error('❌ Error in auto-unassign workflow:', error);
              throw error;
            }